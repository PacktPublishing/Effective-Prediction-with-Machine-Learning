import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
num_points = 100
x_vals = np.arange(num_points)
y_truth = 2 * x_vals
plt.plot(x_vals, y_truth)

y_noisy = y_truth.copy()
#Change y-values of some points in the line
y_noisy[20:40] = y_noisy[20:40] * (-4 * x_vals[20:40]) - 100
plt.title("Noise in y-direction")
plt.xlim([0,100])
plt.scatter(x_vals, y_noisy,marker='x')

from sklearn.linear_model import LinearRegression,TheilSenRegressor
from sklearn.metrics import r2_score, mean_absolute_error
named_estimators = [('OLS ', LinearRegression()), ('TSR ',TheilSenRegressor())]
for num_index, est in enumerate(named_estimators):
	y_pred = est[1].fit(x_vals.reshape(-1,1),y_noisy).predict(x_vals.reshape(-1, 1))
	print (est[0], "R-squared: ", r2_score(y_truth, y_pred), "Mean Absolute Error", mean_absolute_error(y_truth, y_pred))
	plt.plot(x_vals, y_pred, label=est[0])
	
plt.plot(x_vals, y_truth, label='True line')
plt.legend(loc='upper left')

for num_index, est in enumerate(named_estimators):
	y_pred = est[1].fit(x_vals.reshape(-1,1),y_noisy).predict(x_vals.reshape(-1, 1))
	plt.plot(x_vals, y_pred, label=est[0])
	
plt.legend(loc='upper left')
plt.title("Noise in y-direction")
plt.xlim([0,100])
plt.scatter(x_vals, y_noisy,marker='x', color='red')

from sklearn.linear_model import Ridge, LinearRegression,TheilSenRegressor, RANSACRegressor, ElasticNet, HuberRegressor
from sklearn.metrics import r2_score, mean_absolute_error
named_estimators = [('OLS ', LinearRegression()),('Ridge ', Ridge()),('TSR ', TheilSenRegressor()),('RANSAC',RANSACRegressor()),('ENet ',ElasticNet()),('Huber ',HuberRegressor())]

for num_index, est in enumerate(named_estimators):
	y_pred = est[1].fit(x_vals.reshape(-1,1),y_noisy).predict(x_vals.reshape(-1, 1))
	print (est[0], "R-squared: ", r2_score(y_truth, y_pred), "Mean Absolute Error", mean_absolute_error(y_truth, y_pred))
	
from sklearn.datasets import load_iris
from sklearn.datasets import load_iris
import numpy as np
iris = load_iris()
iris_data = iris.data
mask = np.random.binomial(1, .25, iris_data.shape).astype(bool)
iris_data[mask] = np.nan
iris_data[:5]
from sklearn import pipeline, preprocessing, decomposition
pca = decomposition.PCA()
imputer = preprocessing.Imputer()
pipe = pipeline.Pipeline([('imputer', imputer), ('pca', pca)])
iris_data_transformed = pipe.fit_transform(iris_data)
iris_data_transformed[:5]
pipe2 = pipeline.make_pipeline(imputer, pca)
pipe2.steps
iris_data_transformed2 = pipe2.fit_transform(iris_data)
iris_data_transformed2[:5]

pipe2.set_params(pca__n_components=2)

iris_data_transformed3 = pipe2.fit_transform(iris_data)
iris_data_transformed3[:5]